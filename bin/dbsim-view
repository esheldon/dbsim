#!/usr/bin/env python
from __future__ import print_function

import logging
import numpy as np
import dbsim

from argparse import ArgumentParser
parser=ArgumentParser(__doc__)

parser.add_argument('sim_config',help="simulation config file")
parser.add_argument('fit_config',help="run config file")
parser.add_argument('ntrials',type=int,help="number to simulate")
parser.add_argument('seed',type=int,help="seed to use")

#parser.add_argument('--stamps',action='store_true',help="show stamps/fof groups")

parser.add_argument("--loglevel", default='info',
                  help=("logging level"))

def main():
    args=parser.parse_args()

    dbsim.util.setup_logging(args.loglevel)
    logger=logging.getLogger(__name__)

    sim_conf = dbsim.files.read_yaml(args.sim_config)
    fit_conf = dbsim.files.read_yaml(args.fit_config)

    logger.info('seed: %d' % args.seed)

    rng = np.random.RandomState(args.seed)

    if sim_conf['sim_type']=='descwl':
        pos_sampler=dbsim.descwl_sim.PositionSampler(
            sim_conf['positions'],
            rng,
        )
        cat_sampler=dbsim.descwl_sim.CatalogSampler(sim_conf, rng)
        sim=dbsim.descwl_sim.DESWLSim(
            sim_conf,
            cat_sampler,
            pos_sampler,
            rng,
        )
    else:
        sim=dbsim.simulation.Sim(sim_conf, rng)


    for i in range(args.ntrials):

        logger.debug("trial: %d/%d" % (i+1,args.ntrials))

        logger.debug('simulating images')
        sim.make_obs()

        sim.show()
        #if 'q'==input('hit a key (q to quit): '):
        #    return

        #if args.stamps:
        #if 'y'==input('show stamps? (y or n): '):
        fof_conf=fit_conf['fofs']
        weight_type=fit_conf['weight_type']

        if fof_conf['find_fofs']:
            mbobs_list = sim.get_fofs(
                fof_conf,
                weight_type=weight_type,
                show=True,
            )
        else:
            mbobs_list = sim.get_mbobs_list(weight_type=weight_type)

        if len(mbobs_list)==0:
            logger.debug("no objects detected")
            continue
        else:

            response=input('show stamps? (y or n, q to quit): ')

            if response=='q':
                return

            if response=='y':
                if fof_conf['find_fofs']:
                    for i,mbl in enumerate(mbobs_list):
                        title='FoF %d/%d' % (i+1,len(mbobs_list))
                        dbsim.visualize.view_mbobs_list(
                            mbl,
                            title=title,
                            dims=[800,800],
                        )
                    if 'q'==input('hit a key (q to quit): '):
                        return
                else:

                    dbsim.visualize.view_mbobs_list(mbobs_list)
                    if 'q'==input('hit a key (q to quit): '):
                        stop


main()
