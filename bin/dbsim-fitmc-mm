#!/usr/bin/env python
from __future__ import print_function

import numpy as np
import dbsim
import fitsio
import esutil as eu

import argparse


parser=argparse.ArgumentParser()

parser.add_argument('runs', help='run or name of runs config for multiple runs')

parser.add_argument('--select',default=None,
            help='read the selection from the indicated selection config')


parser.add_argument('--nsigma',default=3.0,type=float,
                    help='number sigma error bars to print')

def add_sums(sums, tsums):
    for n in sums.dtype.names:
        sums[n] += tsums[n]

def average_shear(sums):
    dt=[
        ('R','f8', (2,2) ),
        ('shear','f8',2),
        ('shear_err','f8',2),
        ('shear_true','f8',2),
    ]
    output = eu.numpy_util.add_fields(sums, dt)
    st=output[0]

    g_mean = st['g']/st['wsum']
    gsq_mean = st['gsq']/st['wsum']

    g_err = np.sqrt( (gsq_mean - g_mean**2)/st['wsum'] )

    g1p_mean = st['g_1p']/st['wsum_1p']
    g1m_mean = st['g_1m']/st['wsum_1m']
    g2p_mean = st['g_2p']/st['wsum_2p']
    g2m_mean = st['g_2m']/st['wsum_2m']

    st['R'][0,0] = (g1p_mean[0] - g1m_mean[0])/0.02
    st['R'][0,1] = (g1p_mean[1] - g1m_mean[1])/0.02
    st['R'][1,0] = (g2p_mean[0] - g2m_mean[0])/0.02
    #st['R'][1,0] = (g1p_mean[1] - g1m_mean[1])/0.02
    #st['R'][0,1] = (g2p_mean[0] - g2m_mean[0])/0.02
    st['R'][1,1] = (g2p_mean[1] - g2m_mean[1])/0.02

    print('num:',st['wsum'][0])
    print('R:')
    print(st['R'])

    Rinv = np.linalg.inv(st['R'])
    #st['shear'] = np.dot(Rinv,g_mean)
    #st['shear_err'] = np.dot(Rinv,g_err)
    st['shear'] = g_mean/np.diag(st['R'])
    st['shear_err'] = g_err/np.diag(st['R'])

    return output

def main():
    args = parser.parse_args()
    if 'runs' in args.runs:
        data=dbsim.files.read_config_file(args.runs)
        runs=data['runs']

    else:
        runs=[args.runs]

    conf = dbsim.files.read_config_file(runs[0])
    simc = dbsim.files.read_config_file(conf['sim'])
    fitc = dbsim.files.read_config_file(conf['fit'])

    for i,run in enumerate(runs):
        sums_file=dbsim.files.get_sums_url(run, extra=args.select)
        print('reading:',sums_file)
        tsums = fitsio.read(sums_file)
        if i==0:
            sums=tsums
        else:
            add_sums(sums, tsums)

    st = average_shear(sums)
    st['shear_true'] = simc['shear']
    mcfits = dbsim.averaging.get_m_c_oneshear(st, nsig=args.nsigma)

main()
