#!/usr/bin/env python
"""
mpirun -n 8 dbsim-dosums-mpi
"""

import os
from glob import glob
import fitsio
import esutil as eu
import dbsim
import navy
import argparse

fclass=argparse.ArgumentDefaultsHelpFormatter
parser=argparse.ArgumentParser(formatter_class=fclass)

parser.add_argument('runs', help='run to process')

parser.add_argument('--select',default=None,
            help='read the selection from the indicated selection config')

parser.add_argument('--nsigma',default=3.0,type=float,
                    help='number sigma error bars to print')

parser.add_argument('--preselect',action='store_true',help='preselect s2n_true > 5')

# ignored but needed for getting a file name
parser.add_argument('--ntest',default=None,type=int,
                    help='work on a small subset for quick tests')

parser.add_argument('--match',action='store_true',
                    help='match to the truth catalog')

parser.add_argument('--total-deriv',action='store_true',
                    help='use total derivative')

def add_all_sums(sums_list):
    sums = sums_list[0].copy()

    for tsums in sums_list[1:]:
        for n in sums.dtype.names:
            if n in ['shear_true','file_id']:
                continue
            else:
                sums[n] += tsums[n]

    return sums

def main():
    args=parser.parse_args()

    if args.select is not None:
        d = dbsim.files.read_config_file('select-'+args.select)
        select = d['select'].strip()
    else:
        select = None

    def dorun(fname):
        if args.total_deriv:
            return dbsim.averaging.mpi_do_all_sums(
                fname,
                select=select,
            )
        else:
            summer=dbsim.averaging.Summer(args)
            return summer.do_file_sums(fname)

    if navy.rank == navy.ADMIRAL:

        dir=dbsim.files.get_output_dir(args.runs)
        pattern=os.path.join(dir, '*.fits')
        flist=glob(pattern)
        flist.sort()

        admiral = navy.Admiral(flist)
        admiral.orchestrate()

        sums = add_all_sums(admiral.reports)
        sums['file_id'] = -9999

        sums_not_none=[s for s in admiral.reports if s is not None]
        allsums = eu.numpy_util.combine_arrlist(sums_not_none)
        allsums = allsums[allsums['file_id'].argsort()]

        #summer=dbsim.averaging.Summer(args)
        #summer.write_sums(args.runs, sums)

        outfile=dbsim.files.get_sums_url(args.runs, extra=args.select)
        eu.ostools.makedirs_fromfile(outfile)
        print("writing:",outfile)
        with fitsio.FITS(outfile,'rw',clobber=True) as fits:
            fits.write(sums, extname='reduced')
            fits.write(allsums, extname='allsums')


    else:
        ship = navy.Ship(dorun)
        ship.go()



main()
