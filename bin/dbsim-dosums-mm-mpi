#!/usr/bin/env python
"""
mpirun -n 8 dbsim-dosums-mm-api
"""

import os
from glob import glob
import numpy as np
import fitsio
import esutil as eu
import dbsim
import navy
import argparse

fclass=argparse.ArgumentDefaultsHelpFormatter
parser=argparse.ArgumentParser(formatter_class=fclass)

parser.add_argument('run', help='run to process')
parser.add_argument('--select',help='selection identifier')


parser.add_argument('--nsigma',default=3.0,type=float,
                    help='number sigma error bars to print')


def add_all_sums(sums_list):
    sums = sums_list[0].copy()

    for tsums in sums_list[1:]:
        for n in sums.dtype.names:
            sums[n] += tsums[n]

    return sums

def get_sums_dt():
    dt=[]
    for type in ['noshear','1p','1m','2p','2m']:
        n=dbsim.util.Namer(back=type)
        dt += [
            (n('g'),'f8',2),
            (n('gsq'),'f8',2),
            (n('wsum'),'f8',2),
            (n('wsq'),'f8',2),
        ]
    return dt

def do_sums(fit_conf, data, select=None):

    model=fit_conf['max']['model']

    n=dbsim.util.Namer(front=model)

    if select is not None:
        s2n=data[n('s2n')]
        f=data[n('flux')]
        fe=data[n('flux_err')]
        flux_s2n = np.sqrt( ( (f/fe)**2 ).sum(axis=1) )
        Tratio=data[n('T_ratio')]

        logic=eval(select)
        w,=np.where(logic)
        print('    kept %d/%d %g' % (w.size,data.size,float(w.size)/data.size))
    else:
        w=np.arange(data.size)

    res={}
    res['gsum'] = data[n('g')][w].sum(axis=0)
    res['gsqsum'] = ( data[n('g')][w]**2 ).sum(axis=0)

    wts = np.ones( (w.size,2), dtype='f8')
    res['wsum'] = wts.sum(axis=0)
    res['wsqsum'] = (wts**2).sum(axis=0)

    return res

def do_all_sums(fit_conf, fname, select=None):

    dt=get_sums_dt()
    output=np.zeros(1, dtype=dt)
    o1=output[0]

    print('processing:',fname)
    with fitsio.FITS(fname) as fits:
        for type in ['noshear','1p','1m','2p','2m']:

            n=dbsim.util.Namer(back=type)

            data = fits[type][:]

            res=do_sums(
                fit_conf,
                data,
                select=select,
            )

            o1[n('g')]    = res['gsum']
            o1[n('wsum')] = res['wsum']
            o1[n('wsq')]  = res['wsqsum']
            o1[n('gsq')]  = res['gsqsum']

    return output

def main():
    args=parser.parse_args()

    run_conf=dbsim.files.read_config_file(args.run)
    fit_conf=dbsim.files.read_config_file(run_conf['fit'])

    if args.select is not None:
        d = dbsim.files.read_config_file('select-'+args.select)
        select = d['select'].strip()
    else:
        select = None

    def dorun(fname):
        return do_all_sums(fit_conf, fname, select=select)

    if navy.rank == navy.ADMIRAL:

        dir=dbsim.files.get_output_dir(args.run)

        pattern=os.path.join(dir, '*.fits')
        flist=glob(pattern)
        flist.sort()

        admiral = navy.Admiral(flist)
        admiral.orchestrate()

        sums = add_all_sums(admiral.reports)

        outfile=dbsim.files.get_sums_url(args.run, extra=args.select)
        eu.ostools.makedirs_fromfile(outfile)
        print("writing:",outfile)
        fitsio.write(outfile, sums, clobber=True)

    else:
        ship = navy.Ship(dorun)
        ship.go()



main()
