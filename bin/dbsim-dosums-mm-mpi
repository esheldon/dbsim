#!/usr/bin/env python
"""
mpirun -n 8 dbsim-dosums-mm-mpi run
"""

import os
from glob import glob
import numpy as np
import fitsio
import esutil as eu
import dbsim
import navy
import argparse

fclass=argparse.ArgumentDefaultsHelpFormatter
parser=argparse.ArgumentParser(formatter_class=fclass)

parser.add_argument('run', help='run to process')
parser.add_argument('--select',help='selection identifier')


parser.add_argument('--nsigma',default=3.0,type=float,
                    help='number sigma error bars to print')


def main():
    args=parser.parse_args()

    run_conf=dbsim.files.read_config_file(args.run)
    fit_conf=dbsim.files.read_config_file(run_conf['fit'])

    if args.select is not None:
        d = dbsim.files.read_config_file('select-'+args.select)
        select = d['select'].strip()
    else:
        select = None

    def dorun(fname):
        return dbsim.averaging.mpi_do_all_sums(
            fit_conf, 
            fname, 
            select=select,
        )

    if navy.rank == navy.ADMIRAL:

        dir=dbsim.files.get_output_dir(args.run)

        pattern=os.path.join(dir, '*.fits')
        flist=glob(pattern)
        flist.sort()

        admiral = navy.Admiral(flist)
        admiral.orchestrate()

        sums = dbsim.averaging.mpi_add_all_sums(admiral.reports)
        sums['file_id'] = -9999

        sums_not_none=[s for s in admiral.reports if s is not None]
        allsums=eu.numpy_util.combine_arrlist(sums_not_none)
        allsums = allsums[allsums['file_id'].argsort()]

        outfile=dbsim.files.get_sums_url(args.run, extra=args.select)
        eu.ostools.makedirs_fromfile(outfile)
        print("writing:",outfile)
        with fitsio.FITS(outfile,'rw',clobber=True) as fits:
            fits.write(sums, extname='reduced')
            fits.write(allsums, extname='allsums')

    else:
        ship = navy.Ship(dorun)
        ship.go()



main()
